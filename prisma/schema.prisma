generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model post_comments {
  id                 String    @id @default(uuid()) @db.Uuid
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  updated_at         DateTime? @default(now()) @db.Timestamptz(6)
  deleted_at         DateTime? @db.Timestamptz(6)
  text               String?
  post_id            String?   @db.Uuid
  parrent_comment_id BigInt?
  created_by         String?   @db.Uuid
  creator            users?    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_comments_creator")
  posts              posts?    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_posts_post_comments")
}

model posts {
  id            String          @id @default(uuid()) @db.Uuid
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @default(now()) @db.Timestamptz(6)
  deleted_at    DateTime?       @db.Timestamptz(6)
  title         String?         @db.VarChar(255)
  created_by    String?         @db.Uuid
  body          String?
  slug          String?         @db.VarChar(255)
  photo_url     String?
  published     Boolean?        @default(true)
  view_count    BigInt?         @default(0)
  like_count    BigInt?         @default(0)
  post_comments post_comments[]
  post_likes    post_likes[]
  creator       users?          @relation(fields: [created_by], references: [id], map: "fk_posts_creator")

  @@unique([created_by, slug], map: "creator and slug inique")
  @@index([deleted_at])
  @@index([created_by, slug, published, deleted_at], map: "posts_created_by_idx")
}

model users {
  id              String          @id @default(uuid()) @db.Uuid
  created_at      DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?       @db.Timestamptz(6)
  deleted_at      DateTime?       @db.Timestamptz(6)
  first_name      String?         @default("pilput") @db.VarChar(255)
  last_name       String?         @default("admin") @db.VarChar(255)
  email           String          @unique(map: "idx_users_email") @db.VarChar(255)
  password        String?         @db.VarChar(255)
  image           String?
  is_super_admin  Boolean?        @default(false)
  username        String?         @unique(map: "idx_users_username") @db.VarChar(255)
  github_id       BigInt?         @unique(map: "users_github_id_unique")
  followers_count BigInt?         @default(0)
  following_count BigInt?         @default(0)
  files           files[]
  likes           likes[]
  post_comments   post_comments[]
  post_likes      post_likes[]
  post_views      post_views[]
  posts           posts[]
  profile         profiles?
  sessions        sessions[]
  followers       user_follows[]  @relation("UserFollowers")
  following       user_follows[]  @relation("UserFollowing")

  @@index([deleted_at])
}

model posts_to_tags {
  post_id String @db.Uuid
  tag_id  Int
  tag     tags   @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "posts_to_tags_tag_id_tags_id_fk")

  @@id([post_id, tag_id], map: "posts_to_tags_posts_id_tags_id_pk")
}

model tags {
  id            Int             @id @default(autoincrement())
  name          String?         @unique(map: "idx_tags_name") @db.VarChar(30)
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  posts_to_tags posts_to_tags[]
}

model files {
  id         String    @id @default(uuid()) @db.Uuid
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  name       String?   @db.VarChar(255)
  path       String?
  size       Int?
  type       String?   @db.VarChar(255)
  created_by String?   @db.Uuid
  users      users?    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "files_created_by_users_id_fk")
}

model likes {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  post_id    String?   @db.Uuid
  user_id    String?   @db.Uuid
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "likes_user_id_users_id_fk")

  @@unique([post_id, user_id], map: "idx_like_post_id_created_by")
}

model profiles {
  id         Int       @id @default(autoincrement())
  user_id    String    @unique(map: "idx_profiles_user_id") @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  bio        String?
  website    String?
  phone      String?   @db.VarChar(50)
  location   String?   @db.VarChar(255)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "profiles_user_id_users_id_fk")
}

model chat_conversations {
  id         String    @id @default(uuid()) @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @updatedAt @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  title      String    @db.VarChar(255)
  user_id    String    @db.Uuid
}

model chat_messages {
  id                String   @id @default(uuid()) @db.Uuid
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  updated_at        DateTime @updatedAt @db.Timestamptz(6)
  conversation_id   String   @db.Uuid
  user_id           String   @db.Uuid
  role              String   @db.VarChar(20)
  content           String
  model             String?  @db.VarChar(100)
  prompt_tokens     Int?
  completion_tokens Int?
  total_tokens      Int?
}

model user_follows {
  id           String    @id @default(uuid()) @db.Uuid
  follower_id  String    @db.Uuid
  following_id String    @db.Uuid
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  deleted_at   DateTime? @db.Timestamptz(6)
  follower     users     @relation("UserFollowers", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_follows_follower_id")
  following    users     @relation("UserFollowing", fields: [following_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_follows_following_id")

  @@index([follower_id], map: "idx_user_follows_follower_id")
  @@index([following_id], map: "idx_user_follows_following_id")
  @@index([created_at], map: "idx_user_follows_created_at")
  @@index([deleted_at], map: "idx_user_follows_deleted_at")
}

model post_likes {
  id         String    @id @default(uuid()) @db.Uuid
  post_id    String    @db.Uuid
  user_id    String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  posts      posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_post_likes_post_id")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_post_likes_user_id")

  @@index([created_at], map: "idx_post_likes_created_at")
  @@index([deleted_at], map: "idx_post_likes_deleted_at")
  @@index([post_id], map: "idx_post_likes_post_id")
  @@index([user_id], map: "idx_post_likes_user_id")
}

model post_views {
  id         String    @id @default(uuid()) @db.Uuid
  post_id    String    @db.Uuid
  user_id    String?   @db.Uuid
  ip_address String?   @db.VarChar(45)
  user_agent String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_post_views_user_id")

  @@index([created_at], map: "idx_post_views_created_at")
  @@index([deleted_at], map: "idx_post_views_deleted_at")
  @@index([post_id], map: "idx_post_views_post_id")
  @@index([user_id], map: "idx_post_views_user_id")
}

model sessions {
  refresh_token String    @id @db.VarChar(200)
  user_id       String    @db.Uuid
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  user_agent    String?
  expires_at    DateTime? @db.Timestamptz(6)
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "sessions_user_id_users_id_fk")
}
